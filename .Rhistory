print(sentence)
# if our first word contains an @, change our first word to an @, this allows us to search through our raw tokens.
# Our selected word is already recorded in sentence, so we don't need to worry.
if (grepl("@", selected_word)) {
selected_word <- "@"
}
while(!grepl('[.!?]|ENDOFLINE', sentence)) {
matches <- append(c(F), stringr::str_to_lower(selected_word) == corpus$lowercase_tokens)
after_match <- corpus[matches, ]
# No sentiment influence
if (nchar(sentiment) == 0) {
after_sentiment <- after_match$raw_tokens
# Only choose from the chosen sentiment. If the sentiment has no followups, pick from the standard one
} else if(lazy_sentiment) {
after_sentiment <- after_match[after_match$sentiment == sentiment, "raw_tokens"]
if (nrow(after_sentiment) == 0) {
after_sentiment <- after_match$raw_tokens
}
# Increase the ammount of tweets of a certain sentiment by amp
} else {
good_words <- after_match[after_match$sentiment == sentiment, "raw_tokens"]
after_sentiment <- c(after_match$raw_tokens, rep(good_words, amp))
asdf <- readline(prompt="sentence")
}
print(after_sentiment)
selected_word <- sample(after_sentiment, 1)
print(selected_word)
if (grepl("@", selected_word)) {
print('WE GOT AN @')
print(handles)
print(length(handles))
# for some reason, it cannot randomly pick from our handles list???
selected_at <- sample(handles,1, replace = T)
sentence <- paste(sentence, selected_at)
selected_word <- "@"
} else {
sentence <- paste(sentence, selected_word)
}
}
sentence <- stringr::str_replace(sentence, " ENDOFLINE", "")
return(sentence)
}
make_sentence(tweets, "Nevada,")
make_sentence <- function(corpus, prompt = "", sentiment = "", lazy_sentiment = T, amp = 1) {
handles <- corpus$handles
corpus <- corpus$tokens
# No prompt available
if (nchar(prompt) == 0) {
selected_word <- sample(corpus[corpus$firsts, "raw_tokens"], 1)
}
# User prompted the sentence maker
else {
# determine if the prompt is IN our corpus
regex_prompt <- paste('\\b', prompt, '\\b', sep = "")
prompt_is_valid <- grepl(regex_prompt, corpus$lowercase_tokens, ignore.case = T)
if (grepl("@", prompt)) {
# do nothing lmfao
}else if (!any(prompt_is_valid)) {
return("This prompt is bad!")
}
selected_word <- prompt
}
sentence <- selected_word
print(sentence)
# if our first word contains an @, change our first word to an @, this allows us to search through our raw tokens.
# Our selected word is already recorded in sentence, so we don't need to worry.
if (grepl("@", selected_word)) {
selected_word <- "@"
}
while(!grepl('[.!?]|ENDOFLINE', sentence)) {
matches <- append(c(F), stringr::str_to_lower(selected_word) == corpus$lowercase_tokens)
after_match <- corpus[matches, ]
# No sentiment influence
if (nchar(sentiment) == 0) {
after_sentiment <- after_match$raw_tokens
# Only choose from the chosen sentiment. If the sentiment has no followups, pick from the standard one
} else if(lazy_sentiment) {
after_sentiment <- after_match[after_match$sentiment == sentiment, "raw_tokens"]
if (nrow(after_sentiment) == 0) {
after_sentiment <- after_match$raw_tokens
}
# Increase the ammount of tweets of a certain sentiment by amp
} else {
good_words <- after_match[after_match$sentiment == sentiment, "raw_tokens"]
after_sentiment <- c(after_match$raw_tokens, rep(good_words, amp))
asdf <- readline(prompt="sentence")
}
selected_word <- sample(after_sentiment, 1)
if (grepl("@", selected_word)) {
# for some reason, it cannot randomly pick from our handles list???
selected_at <- sample(handles,1, replace = T)
sentence <- paste(sentence, selected_at)
selected_word <- "@"
} else {
sentence <- paste(sentence, selected_word)
}
}
sentence <- stringr::str_replace(sentence, " ENDOFLINE", "")
return(sentence)
}
make_sentence(tweets, "Nevada,")
make_sentence(tweets, "Nevada,")
make_sentence(tweets, "Nevada,")
make_sentence(tweets, "Nevada,")
make_sentence(tweets, "Nevada,")
make_sentence(tweets, "Nevada,")
make_sentence(tweets, "Nevada,")
make_sentence(tweets, "Nevada,")
make_sentence(tweets, "Nevada,")
make_sentence(tweets, "Nevada,")
make_sentence(tweets, "Nevada,")
make_sentence(tweets, "Nevada,")
make_sentence(tweets, "Nevada,")
make_sentence(tweets, "Nevada,")
make_sentence(tweets, "Nevada,")
make_sentence(tweets, "Nevada,")
make_sentence(tweets, "Nevada,")
make_sentence(tweets, "Nevada,")
make_sentence(tweets, "Nevada,")
make_sentence(tweets, "Nevada,")
make_sentence(tweets, "Nevada,")
make_sentence(tweets, "Nevada,")
make_sentence(tweets, "Nevada,")
make_sentence(tweets, "Nevada,")
make_sentence(tweets, "Nevada,")
make_sentence(tweets, "Nevada,")
make_sentence(tweets, "Nevada,")
make_sentence(tweets, "Nevada,")
make_sentence(tweets, "Nevada,")
make_sentence(tweets, "Nevada,")
make_sentence(tweets, "Nevada,")
make_sentence(tweets, "Nevada,")
make_sentence(tweets, "Nevada,")
make_sentence(tweets, "Nevada,")
make_sentence(tweets, "Nevada,")
make_sentence(tweets, "Nevada,")
make_sentence(tweets, "Nevada,")
make_sentence(tweets, "Nevada,")
make_sentence(tweets, "Nevada,")
make_sentence(tweets, "Nevada,")
make_sentence(tweets, "Nevada,")
make_sentence(tweets, "Nevada,")
make_sentence(tweets, "Nevada,")
make_sentence(tweets, "Nevada,")
make_sentence(tweets, "Nevada,")
make_sentence(tweets, "Nevada,")
make_sentence(tweets, "Nevada,")
make_sentence(tweets, "Nevada,")
make_sentence(tweets, "Nevada,")
make_sentence(tweets, "Nevada,")
make_sentence(tweets, "Nevada,")
make_sentence(tweets, "Nevada,")
make_sentence(tweets, "Nevada,")
make_sentence(tweets, "Nevada,")
make_sentence(tweets, "Nevada,")
make_sentence(tweets, "Nevada,")
make_sentence(tweets, "Nevada,")
make_sentence(tweets, "Nevada,")
make_sentence(tweets, "Nevada,")
make_sentence(tweets, "Nevada,")
make_sentence(tweets, "Nevada,")
make_sentence(tweets, "Nevada,")
make_sentence(tweets, "Nevada,")
make_sentence(tweets, "Nevada,")
vecs <- c('as', 'i', 'knew', 'eggs,', 'meep')
strsplit(vecs, " ")
cut_vecs2 <- strsplit(cut_vecs, ",")
cut_vecs <- strsplit(vecs, " ")
cut_vecs2 <- strsplit(cut_vecs, ",")
cut_vecs2
cut_vecs2 <- strsplit(cut_vecs, ",")
cut_vecs <- strsplit(vecs, " ")
?apply
cut_vecs2 <- apply(cut_vecs, strsplit(","))
cut_vecs2 <- apply(cut_vecs, strsplit)
cut_vecs2 <- apply(cut_vecs, FUN=strsplit)
cut_vecs2 <- apply(cut_vecs, FUN=strsplit(","))
cut_vecs2 <- apply(cut_vecs, FUN=strsplit(split = ","))
cut_vecs2 <- apply(cut_vecs, FUN=strsplit, split = ",")
cut_vecs <- strsplit(vecs, " ")
cut_vecs2 <- apply(cut_vecs, FUN=strsplit, split = ",")
cut_vecs
cut_vecs2 <- lapply(cut_vecs, FUN=strsplit, split = ",")
cut_vecs2
get_rid_of_punctuation <- function(string) {
if(grepl(",", string)) {
return(c(string, ","))
}
return(string)
}
vecs2 <- apply(vecs, get_rid_of_punctuation)
vecs2 <- apply(vecs, FUN=get_rid_of_punctuation)
get_rid_of_punctuation <- function(string) {
if(grepl(",", string)) {
return(c(string, ","))
}
return(string)
}
vecs <- c('as', 'i', 'knew', 'eggs,', 'meep')
vecs2 <- apply(vecs, FUN=get_rid_of_punctuation)
vecs2 <- apply(vecs, print)
vecs2 <- apply(vecs, FUN=print)
dim(vecs)
View(trump_tweets)
vecs <- list('as', 'i', 'knew', 'eggs,', 'meep')
get_rid_of_punctuation <- function(string) {
if(grepl(",", string)) {
return(c(string, ","))
}
return(string)
}
vecs2 <- lapply(vecs, FUN=print)
vecs2 <- lapply(vecs, FUN=get_rid_of_punctuation())
vecs2 <- lapply(vecs, FUN=get_rid_of_punctuation
vecs2
vecs2 <- lapply(vecs, FUN=get_rid_of_punctuation)
vecs2
unlist(vecs2)
return(c(stringr::str_remove_all(string, ","), ","))
get_rid_of_punctuation <- function(string) {
if(grepl(",", string)) {
return(c(stringr::str_remove_all(string, ","), ","))
}
return(string)
}
vecs2 <- lapply(vecs, FUN=get_rid_of_punctuation)
vecs2
?split
strsplit()
?strsplit
clean_punk <- function(string){
punctuation <- c(".",",","!","?")
for(punk in punctuation) {
string <- stringr::str_replace_all(string, punk, paste0(" ", punk))
}
return(strsplit(string, " "))
}
clean_punk(tweet)
tweet <- "this is a tweet, yo!"
clean_punk(tweet)
clean_punk <- function(string){
punctuation <- c(".",",","!","?")
for(punk in punctuation) {
print(punk)
string <- stringr::str_replace_all(string, punk, paste0(" ", punk))
}
return(strsplit(string, " "))
}
clean_punk(tweet)
clean_punk <- function(string){
punctuation <- c(".",",","!","?")
for(punk in punctuation) {
print(punk)
string <- stringr::str_replace_all(string, punk, paste0(" ", punk))
}
print(string)
return(strsplit(string, " "))
}
clean_punk(tweet)
tweet <- "this is a tweet, yo!"
clean_punk(tweet)
clean_punk <- function(string){
punctuation <- c(".",",","!","?")
for(punk in punctuation) {
print(punk)
string <- stringr::str_replace_all(string, punk, paste0(" ", punk))
print(string)
}
print(string)
return(strsplit(string, " "))
}
clean_punk(tweet)
clean_punk <- function(string){
punctuation <- c(".",",","!","?")
for(punk in punctuation) {
print(punk)
print(string)
string <- stringr::str_replace_all(string, punk, paste0(" ", punk))
print(string)
}
print(string)
return(strsplit(string, " "))
}
clean_punk(tweet)
?stringr::str_replace_all
clean_punk <- function(string){
punctuation <- c(".",",","!","?")
for(punk in punctuation) {
print(punk)
print(string)
string <- stringr::str_replace_all(string, '[.,!?]', " "))
print(string)
}
print(string)
return(strsplit(string, " "))
}
clean_punk(tweet)
clean_punk <- function(string){
punctuation <- c(".",",","!","?")
for(punk in punctuation) {
print(string)
string <- stringr::str_replace_all(string, '[.,!?]', " "))
print(string)
}
print(string)
return(strsplit(string, " "))
}
clean_punk(tweet)
clean_punk <- function(string){
punctuation <- c(".",",","!","?")
for(punk in punctuation) {
print(string)
string <- stringr::str_replace_all(string, '[.,!?]', " "))
print(string)
}
print(string)
return(strsplit(string, " "))
}
clean_punk(tweet)
clean_punk <- function(string){
punctuation <- c(".",",","!","?")
for(punk in punctuation) {
print(punk)
string <- stringr::str_replace_all(string, '[.,!?]', " "))
print(string)
}
print(string)
return(strsplit(string, " "))
}
clean_punk(tweet)
clean_punk <- function(string){
punctuation <- c(".",",","!","?")
stringr::str_replace_all(string, "[,.?!]", " ")
print(string)
return(strsplit(string, " "))
}
clean_punk(tweet)
clean_punk <- function(string){
punctuation <- c(".",",","!","?")
string <- stringr::str_replace_all(string, "[,.?!]", " ")
print(string)
return(strsplit(string, " "))
}
clean_punk(tweet)
clean_punk <- function(string){
punctuation <- c(".",",","!","?")
string <- stringr::str_replace_all(string, "[,]", " ,")
print(string)
return(strsplit(string, " "))
}
clean_punk(tweet)
clean_punk <- function(string){
punctuation <- c(".",",","!","?")
string <- stringr::str_replace_all(string, ",", " ,")
print(string)
return(strsplit(string, " "))
}
clean_punk(tweet)
clean_punk <- function(string){
punctuation <- c(".",",","!","?")
for (mark in punctuation) {
string <- stringr::str_replace_all(string, ",", " ,")
print(string)
}
return(strsplit(string, " "))
}
clean_punk(tweet)
clean_punk <- function(string){
for (mark in punctuation) {
string <- stringr::str_replace_all(string, mark, paste0(" ", mark)
print(string)
}
return(strsplit(string, " "))
}
clean_punk(tweet)
clean_punk(tweet)
clean_punk <- function(string){
clean_punk <- function(string){
clean_punk <- function(string) {
for(mark in punctuation) {
string <- stringr::str_replace_all(string, mark, paste0(" ", mark)
print(string)
}
return(strsplit(string, " "))
}
clean_punk(tweet)
clean_punk <- function(string) {
for(mark in punctuation) {
string <- stringr::str_replace_all(string, mark, paste0(" ", mark)
print(string)
}
return(strsplit(string, " "))
}
clean_punk(tweet)
clean_punk <- function(string) {
punctuation <- c(".",",","!","?")
return(strsplit(string, " "))
}
clean_punk <- function(string) {
clean_punk <- function(string) {
for(val in punctuation)
{
string <- stringr::str_replace_all(string, mark, paste0(" ", mark)
print(string)
}
return(strsplit(string, " "))
}
clean_punk(tweet)
clean_punk <- function(string) {
punctuation <- c(".",",","!","?")
for(val in punctuation)
{
string <- stringr::str_replace_all(string, mark, paste0(" ", mark))
print(string)
}
return(strsplit(string, " "))
}
clean_punk(tweet)
clean_punk <- function(string) {
punctuation <- c(".",",","!","?")
for(val in punctuation)
{
string <- stringr::str_replace_all(string, mark, paste0(" ", val))
print(string)
}
return(strsplit(string, " "))
}
clean_punk(tweet)
clean_punk <- function(string) {
punctuation <- c(".",",","!","?")
for(val in punctuation)
{
string <- stringr::str_replace_all(string, val, paste0(" ", val))
print(string)
}
return(strsplit(string, " "))
}
clean_punk(tweet)
clean_punk <- function(string) {
punctuation <- c(".",",","!","?")
for(val in punctuation)
{
print(val)
string <- stringr::str_replace_all(string, val, paste0(" ", val))
print(string)
}
return(strsplit(string, " "))
}
clean_punk(tweet)
clean_punk <- function(string) {
punctuation <- c(".",",","!","?")
for(val in punctuation)
{
print(val)
print(string)
string <- stringr::str_replace_all(string, val, paste0(" ", val))
print(string)
}
return(strsplit(string, " "))
}
clean_punk(tweet)
clean_punk <- function(string) {
punctuation <- c(".",",","!","?")
for(val in punctuation)
{
print(val)
print(string)
string <- stringr::str_replace_all(string, val, "PUNCTUATION MARK")
print(string)
}
return(strsplit(string, " "))
}
clean_punk(tweet)
clean_punk <- function(string) {
punctuation <- c(".",",","!","?")
for(val in punctuation)
{
print(val)
print(string)
string <- stringr::str_replace(string, val, "PUNCTUATION MARK")
print(string)
}
return(strsplit(string, " "))
}
clean_punk(tweet)
clean_punk <- function(string) {
punctuation <- c(".",",","!","?")
for(val in punctuation)
{
val <- paste0("[", val, "]")
print(val)
print(string)
string <- stringr::str_replace(string, val, "PUNCTUATION MARK")
print(string)
}
return(strsplit(string, " "))
}
clean_punk(tweet)
clean_punk <- function(string) {
punctuation <- c(".",",","!","?")
for(val in punctuation)
{
regex_val <- paste0("[", val, "]")
spaced_val <- paste0(" ", val)
print(val)
print(string)
string <- stringr::str_replace(string, regex_val, spaced_val)
print(string)
}
return(strsplit(string, " "))
}
clean_punk(tweet)
