make_sentence(tweets, "Nevada,")
make_sentence(tweets, "Nevada,")
make_sentence(tweets, "Nevada,")
make_sentence(tweets, "Nevada,")
vecs <- c('as', 'i', 'knew', 'eggs,', 'meep')
strsplit(vecs, " ")
cut_vecs2 <- strsplit(cut_vecs, ",")
cut_vecs <- strsplit(vecs, " ")
cut_vecs2 <- strsplit(cut_vecs, ",")
cut_vecs2
cut_vecs2 <- strsplit(cut_vecs, ",")
cut_vecs <- strsplit(vecs, " ")
?apply
cut_vecs2 <- apply(cut_vecs, strsplit(","))
cut_vecs2 <- apply(cut_vecs, strsplit)
cut_vecs2 <- apply(cut_vecs, FUN=strsplit)
cut_vecs2 <- apply(cut_vecs, FUN=strsplit(","))
cut_vecs2 <- apply(cut_vecs, FUN=strsplit(split = ","))
cut_vecs2 <- apply(cut_vecs, FUN=strsplit, split = ",")
cut_vecs <- strsplit(vecs, " ")
cut_vecs2 <- apply(cut_vecs, FUN=strsplit, split = ",")
cut_vecs
cut_vecs2 <- lapply(cut_vecs, FUN=strsplit, split = ",")
cut_vecs2
get_rid_of_punctuation <- function(string) {
if(grepl(",", string)) {
return(c(string, ","))
}
return(string)
}
vecs2 <- apply(vecs, get_rid_of_punctuation)
vecs2 <- apply(vecs, FUN=get_rid_of_punctuation)
get_rid_of_punctuation <- function(string) {
if(grepl(",", string)) {
return(c(string, ","))
}
return(string)
}
vecs <- c('as', 'i', 'knew', 'eggs,', 'meep')
vecs2 <- apply(vecs, FUN=get_rid_of_punctuation)
vecs2 <- apply(vecs, print)
vecs2 <- apply(vecs, FUN=print)
dim(vecs)
View(trump_tweets)
vecs <- list('as', 'i', 'knew', 'eggs,', 'meep')
get_rid_of_punctuation <- function(string) {
if(grepl(",", string)) {
return(c(string, ","))
}
return(string)
}
vecs2 <- lapply(vecs, FUN=print)
vecs2 <- lapply(vecs, FUN=get_rid_of_punctuation())
vecs2 <- lapply(vecs, FUN=get_rid_of_punctuation
vecs2
vecs2 <- lapply(vecs, FUN=get_rid_of_punctuation)
vecs2
unlist(vecs2)
return(c(stringr::str_remove_all(string, ","), ","))
get_rid_of_punctuation <- function(string) {
if(grepl(",", string)) {
return(c(stringr::str_remove_all(string, ","), ","))
}
return(string)
}
vecs2 <- lapply(vecs, FUN=get_rid_of_punctuation)
vecs2
?split
strsplit()
?strsplit
clean_punk <- function(string){
punctuation <- c(".",",","!","?")
for(punk in punctuation) {
string <- stringr::str_replace_all(string, punk, paste0(" ", punk))
}
return(strsplit(string, " "))
}
clean_punk(tweet)
tweet <- "this is a tweet, yo!"
clean_punk(tweet)
clean_punk <- function(string){
punctuation <- c(".",",","!","?")
for(punk in punctuation) {
print(punk)
string <- stringr::str_replace_all(string, punk, paste0(" ", punk))
}
return(strsplit(string, " "))
}
clean_punk(tweet)
clean_punk <- function(string){
punctuation <- c(".",",","!","?")
for(punk in punctuation) {
print(punk)
string <- stringr::str_replace_all(string, punk, paste0(" ", punk))
}
print(string)
return(strsplit(string, " "))
}
clean_punk(tweet)
tweet <- "this is a tweet, yo!"
clean_punk(tweet)
clean_punk <- function(string){
punctuation <- c(".",",","!","?")
for(punk in punctuation) {
print(punk)
string <- stringr::str_replace_all(string, punk, paste0(" ", punk))
print(string)
}
print(string)
return(strsplit(string, " "))
}
clean_punk(tweet)
clean_punk <- function(string){
punctuation <- c(".",",","!","?")
for(punk in punctuation) {
print(punk)
print(string)
string <- stringr::str_replace_all(string, punk, paste0(" ", punk))
print(string)
}
print(string)
return(strsplit(string, " "))
}
clean_punk(tweet)
?stringr::str_replace_all
clean_punk <- function(string){
punctuation <- c(".",",","!","?")
for(punk in punctuation) {
print(punk)
print(string)
string <- stringr::str_replace_all(string, '[.,!?]', " "))
print(string)
}
print(string)
return(strsplit(string, " "))
}
clean_punk(tweet)
clean_punk <- function(string){
punctuation <- c(".",",","!","?")
for(punk in punctuation) {
print(string)
string <- stringr::str_replace_all(string, '[.,!?]', " "))
print(string)
}
print(string)
return(strsplit(string, " "))
}
clean_punk(tweet)
clean_punk <- function(string){
punctuation <- c(".",",","!","?")
for(punk in punctuation) {
print(string)
string <- stringr::str_replace_all(string, '[.,!?]', " "))
print(string)
}
print(string)
return(strsplit(string, " "))
}
clean_punk(tweet)
clean_punk <- function(string){
punctuation <- c(".",",","!","?")
for(punk in punctuation) {
print(punk)
string <- stringr::str_replace_all(string, '[.,!?]', " "))
print(string)
}
print(string)
return(strsplit(string, " "))
}
clean_punk(tweet)
clean_punk <- function(string){
punctuation <- c(".",",","!","?")
stringr::str_replace_all(string, "[,.?!]", " ")
print(string)
return(strsplit(string, " "))
}
clean_punk(tweet)
clean_punk <- function(string){
punctuation <- c(".",",","!","?")
string <- stringr::str_replace_all(string, "[,.?!]", " ")
print(string)
return(strsplit(string, " "))
}
clean_punk(tweet)
clean_punk <- function(string){
punctuation <- c(".",",","!","?")
string <- stringr::str_replace_all(string, "[,]", " ,")
print(string)
return(strsplit(string, " "))
}
clean_punk(tweet)
clean_punk <- function(string){
punctuation <- c(".",",","!","?")
string <- stringr::str_replace_all(string, ",", " ,")
print(string)
return(strsplit(string, " "))
}
clean_punk(tweet)
clean_punk <- function(string){
punctuation <- c(".",",","!","?")
for (mark in punctuation) {
string <- stringr::str_replace_all(string, ",", " ,")
print(string)
}
return(strsplit(string, " "))
}
clean_punk(tweet)
clean_punk <- function(string){
for (mark in punctuation) {
string <- stringr::str_replace_all(string, mark, paste0(" ", mark)
print(string)
}
return(strsplit(string, " "))
}
clean_punk(tweet)
clean_punk(tweet)
clean_punk <- function(string){
clean_punk <- function(string){
clean_punk <- function(string) {
for(mark in punctuation) {
string <- stringr::str_replace_all(string, mark, paste0(" ", mark)
print(string)
}
return(strsplit(string, " "))
}
clean_punk(tweet)
clean_punk <- function(string) {
for(mark in punctuation) {
string <- stringr::str_replace_all(string, mark, paste0(" ", mark)
print(string)
}
return(strsplit(string, " "))
}
clean_punk(tweet)
clean_punk <- function(string) {
punctuation <- c(".",",","!","?")
return(strsplit(string, " "))
}
clean_punk <- function(string) {
clean_punk <- function(string) {
for(val in punctuation)
{
string <- stringr::str_replace_all(string, mark, paste0(" ", mark)
print(string)
}
return(strsplit(string, " "))
}
clean_punk(tweet)
clean_punk <- function(string) {
punctuation <- c(".",",","!","?")
for(val in punctuation)
{
string <- stringr::str_replace_all(string, mark, paste0(" ", mark))
print(string)
}
return(strsplit(string, " "))
}
clean_punk(tweet)
clean_punk <- function(string) {
punctuation <- c(".",",","!","?")
for(val in punctuation)
{
string <- stringr::str_replace_all(string, mark, paste0(" ", val))
print(string)
}
return(strsplit(string, " "))
}
clean_punk(tweet)
clean_punk <- function(string) {
punctuation <- c(".",",","!","?")
for(val in punctuation)
{
string <- stringr::str_replace_all(string, val, paste0(" ", val))
print(string)
}
return(strsplit(string, " "))
}
clean_punk(tweet)
clean_punk <- function(string) {
punctuation <- c(".",",","!","?")
for(val in punctuation)
{
print(val)
string <- stringr::str_replace_all(string, val, paste0(" ", val))
print(string)
}
return(strsplit(string, " "))
}
clean_punk(tweet)
clean_punk <- function(string) {
punctuation <- c(".",",","!","?")
for(val in punctuation)
{
print(val)
print(string)
string <- stringr::str_replace_all(string, val, paste0(" ", val))
print(string)
}
return(strsplit(string, " "))
}
clean_punk(tweet)
clean_punk <- function(string) {
punctuation <- c(".",",","!","?")
for(val in punctuation)
{
print(val)
print(string)
string <- stringr::str_replace_all(string, val, "PUNCTUATION MARK")
print(string)
}
return(strsplit(string, " "))
}
clean_punk(tweet)
clean_punk <- function(string) {
punctuation <- c(".",",","!","?")
for(val in punctuation)
{
print(val)
print(string)
string <- stringr::str_replace(string, val, "PUNCTUATION MARK")
print(string)
}
return(strsplit(string, " "))
}
clean_punk(tweet)
clean_punk <- function(string) {
punctuation <- c(".",",","!","?")
for(val in punctuation)
{
val <- paste0("[", val, "]")
print(val)
print(string)
string <- stringr::str_replace(string, val, "PUNCTUATION MARK")
print(string)
}
return(strsplit(string, " "))
}
clean_punk(tweet)
clean_punk <- function(string) {
punctuation <- c(".",",","!","?")
for(val in punctuation)
{
regex_val <- paste0("[", val, "]")
spaced_val <- paste0(" ", val)
print(val)
print(string)
string <- stringr::str_replace(string, regex_val, spaced_val)
print(string)
}
return(strsplit(string, " "))
}
clean_punk(tweet)
library(mRkov)
install.packages("shiny")
# The UI is the result of calling the `fluidPage()` layout function
my_ui <- fluidPage(
# A static content element: a 2nd level header that displays text
h2("Greetings from Shiny"),
# A widget: a text input box (save input in the `username` key)
textInput(inputId = "username", label = "What is your name?"),
# An output element: a text output (for the `message` key)
textOutput(outputId = "message")
)
# The server is a function that takes `input` and `output` arguments
my_server <- function(input, output) {
# Assign a value to the `message` key in the `output` list using
# the renderText() method, creating a value the UI can display
output$message <- renderText({
# This block is like a function that will automatically rerun
# when a referenced `input` value changes
# Use the `username` key from `input` to create a value
message_str <- paste0("Hello ", input$username, "!")
# Return the value to be rendered by the UI
message_str
})
}
# To start running your app, pass the variables defined in previous
# code snippets into the `shinyApp()` function
shinyApp(ui = my_ui, server = my_server)
library(shiny)
# To start running your app, pass the variables defined in previous
# code snippets into the `shinyApp()` function
shinyApp(ui = my_ui, server = my_server)
# The UI is the result of calling the `fluidPage()` layout function
my_ui <- fluidPage(
# A static content element: a 2nd level header that displays text
h2("Greetings from Shiny"),
# A widget: a text input box (save input in the `username` key)
textInput(inputId = "username", label = "What is your name?"),
# An output element: a text output (for the `message` key)
textOutput(outputId = "message")
)
# The server is a function that takes `input` and `output` arguments
my_server <- function(input, output) {
# Assign a value to the `message` key in the `output` list using
# the renderText() method, creating a value the UI can display
output$message <- renderText({
# This block is like a function that will automatically rerun
# when a referenced `input` value changes
# Use the `username` key from `input` to create a value
message_str <- paste0("Hello ", input$username, "!")
# Return the value to be rendered by the UI
message_str
})
}
# To start running your app, pass the variables defined in previous
# code snippets into the `shinyApp()` function
shinyApp(ui = my_ui, server = my_server)
source("my_ui.R")
source("my_server.R")
pwd()
getwd()
source("my_server.R")
source("my_ui.R")
source("my_server.R")
# To start running your app, pass the variables defined in previous
# code snippets into the `shinyApp()` function
shinyApp(ui = my_ui, server = my_server)
source("my_ui.R")
source("my_server.R")
library(mRkov)
?renderText
source("my_ui.R")
source("my_server.R")
# To start running your app, pass the variables defined in previous
# code snippets into the `shinyApp()` function
shinyApp(ui = my_ui, server = my_server)
source("my_ui.R")
source("my_server.R")
# To start running your app, pass the variables defined in previous
# code snippets into the `shinyApp()` function
shinyApp(ui = my_ui, server = my_server)
# To start running your app, pass the variables defined in previous
# code snippets into the `shinyApp()` function
shinyApp(ui = my_ui, server = my_server)
library(twitteR)
source("my_ui.R")
source("my_server.R")
# To start running your app, pass the variables defined in previous
# code snippets into the `shinyApp()` function
shinyApp(ui = my_ui, server = my_server)
source("my_server.R")
# To start running your app, pass the variables defined in previous
# code snippets into the `shinyApp()` function
shinyApp(ui = my_ui, server = my_server)
source("my_server.R")
# To start running your app, pass the variables defined in previous
# code snippets into the `shinyApp()` function
shinyApp(ui = my_ui, server = my_server)
?actionButton
?tweet_gettr
?renderText
?observeEvent
source("my_ui.R")
source("my_server.R")
# To start running your app, pass the variables defined in previous
# code snippets into the `shinyApp()` function
shinyApp(ui = my_ui, server = my_server)
runApp()
runApp()
my_server <- function(input, output) {
# Assign a value to the `message` key in the `output` list using
# the renderText() method, creating a value the UI can display
output$message <- renderText({
# This block is like a function that will automatically rerun
# when a referenced `input` value changes
# Use the `username` key from `input` to create a value
message_str <- paste0("Scraping ", input$username, "!")
# Return the value to be rendered by the UI
message_str
})
twitter_search <- observeEvent(
input$search, {
tweet_gettr(input$username)
}
)
output$sentence <- renderText({
input$make_sentence
make_sentence(twitter_search)
})
}
runApp()
runApp()
runApp()
runApp()
# The UI is the result of calling the `fluidPage()` layout function
my_ui <- fluidPage(
# A static content element: a 2nd level header that displays text
h2("mRkov: A fun toolbox"),
# A widget: a text input box (save input in the `username` key)
textInput(inputId = "username", label = "Insert Twitter handle (@)"),
# a button to activate a twitter search
actionButton(inputId = "search", label = "Search Twitter!"),
actionButton(inputId = "make_sentence", label = "Make a Sentence!"),
# An output element: a text output (for the `message` key)
textOutput(outputId = "message"),
# An output element: a text output (for the `message` key)
textOutput(outputId = "sentence")
)
runApp()
runApp()
runApp()
runApp()
runApp()
e
source("my_server.R")
# To start running your app, pass the variables defined in previous
# code snippets into the `shinyApp()` function
shinyApp(ui = my_ui, server = my_server)
runApp()
runApp()
runApp()
