clean_punk <- function(string){
punctuation <- c(".",",","!","?")
for(punk in punctuation) {
print(punk)
string <- stringr::str_replace_all(string, '[.,!?]', " "))
print(string)
}
print(string)
return(strsplit(string, " "))
}
clean_punk(tweet)
clean_punk <- function(string){
punctuation <- c(".",",","!","?")
stringr::str_replace_all(string, "[,.?!]", " ")
print(string)
return(strsplit(string, " "))
}
clean_punk(tweet)
clean_punk <- function(string){
punctuation <- c(".",",","!","?")
string <- stringr::str_replace_all(string, "[,.?!]", " ")
print(string)
return(strsplit(string, " "))
}
clean_punk(tweet)
clean_punk <- function(string){
punctuation <- c(".",",","!","?")
string <- stringr::str_replace_all(string, "[,]", " ,")
print(string)
return(strsplit(string, " "))
}
clean_punk(tweet)
clean_punk <- function(string){
punctuation <- c(".",",","!","?")
string <- stringr::str_replace_all(string, ",", " ,")
print(string)
return(strsplit(string, " "))
}
clean_punk(tweet)
clean_punk <- function(string){
punctuation <- c(".",",","!","?")
for (mark in punctuation) {
string <- stringr::str_replace_all(string, ",", " ,")
print(string)
}
return(strsplit(string, " "))
}
clean_punk(tweet)
clean_punk <- function(string){
for (mark in punctuation) {
string <- stringr::str_replace_all(string, mark, paste0(" ", mark)
print(string)
}
return(strsplit(string, " "))
}
clean_punk(tweet)
clean_punk(tweet)
clean_punk <- function(string){
clean_punk <- function(string){
clean_punk <- function(string) {
for(mark in punctuation) {
string <- stringr::str_replace_all(string, mark, paste0(" ", mark)
print(string)
}
return(strsplit(string, " "))
}
clean_punk(tweet)
clean_punk <- function(string) {
for(mark in punctuation) {
string <- stringr::str_replace_all(string, mark, paste0(" ", mark)
print(string)
}
return(strsplit(string, " "))
}
clean_punk(tweet)
clean_punk <- function(string) {
punctuation <- c(".",",","!","?")
return(strsplit(string, " "))
}
clean_punk <- function(string) {
clean_punk <- function(string) {
for(val in punctuation)
{
string <- stringr::str_replace_all(string, mark, paste0(" ", mark)
print(string)
}
return(strsplit(string, " "))
}
clean_punk(tweet)
clean_punk <- function(string) {
punctuation <- c(".",",","!","?")
for(val in punctuation)
{
string <- stringr::str_replace_all(string, mark, paste0(" ", mark))
print(string)
}
return(strsplit(string, " "))
}
clean_punk(tweet)
clean_punk <- function(string) {
punctuation <- c(".",",","!","?")
for(val in punctuation)
{
string <- stringr::str_replace_all(string, mark, paste0(" ", val))
print(string)
}
return(strsplit(string, " "))
}
clean_punk(tweet)
clean_punk <- function(string) {
punctuation <- c(".",",","!","?")
for(val in punctuation)
{
string <- stringr::str_replace_all(string, val, paste0(" ", val))
print(string)
}
return(strsplit(string, " "))
}
clean_punk(tweet)
clean_punk <- function(string) {
punctuation <- c(".",",","!","?")
for(val in punctuation)
{
print(val)
string <- stringr::str_replace_all(string, val, paste0(" ", val))
print(string)
}
return(strsplit(string, " "))
}
clean_punk(tweet)
clean_punk <- function(string) {
punctuation <- c(".",",","!","?")
for(val in punctuation)
{
print(val)
print(string)
string <- stringr::str_replace_all(string, val, paste0(" ", val))
print(string)
}
return(strsplit(string, " "))
}
clean_punk(tweet)
clean_punk <- function(string) {
punctuation <- c(".",",","!","?")
for(val in punctuation)
{
print(val)
print(string)
string <- stringr::str_replace_all(string, val, "PUNCTUATION MARK")
print(string)
}
return(strsplit(string, " "))
}
clean_punk(tweet)
clean_punk <- function(string) {
punctuation <- c(".",",","!","?")
for(val in punctuation)
{
print(val)
print(string)
string <- stringr::str_replace(string, val, "PUNCTUATION MARK")
print(string)
}
return(strsplit(string, " "))
}
clean_punk(tweet)
clean_punk <- function(string) {
punctuation <- c(".",",","!","?")
for(val in punctuation)
{
val <- paste0("[", val, "]")
print(val)
print(string)
string <- stringr::str_replace(string, val, "PUNCTUATION MARK")
print(string)
}
return(strsplit(string, " "))
}
clean_punk(tweet)
clean_punk <- function(string) {
punctuation <- c(".",",","!","?")
for(val in punctuation)
{
regex_val <- paste0("[", val, "]")
spaced_val <- paste0(" ", val)
print(val)
print(string)
string <- stringr::str_replace(string, regex_val, spaced_val)
print(string)
}
return(strsplit(string, " "))
}
clean_punk(tweet)
library(mRkov)
install.packages("shiny")
# The UI is the result of calling the `fluidPage()` layout function
my_ui <- fluidPage(
# A static content element: a 2nd level header that displays text
h2("Greetings from Shiny"),
# A widget: a text input box (save input in the `username` key)
textInput(inputId = "username", label = "What is your name?"),
# An output element: a text output (for the `message` key)
textOutput(outputId = "message")
)
# The server is a function that takes `input` and `output` arguments
my_server <- function(input, output) {
# Assign a value to the `message` key in the `output` list using
# the renderText() method, creating a value the UI can display
output$message <- renderText({
# This block is like a function that will automatically rerun
# when a referenced `input` value changes
# Use the `username` key from `input` to create a value
message_str <- paste0("Hello ", input$username, "!")
# Return the value to be rendered by the UI
message_str
})
}
# To start running your app, pass the variables defined in previous
# code snippets into the `shinyApp()` function
shinyApp(ui = my_ui, server = my_server)
library(shiny)
# To start running your app, pass the variables defined in previous
# code snippets into the `shinyApp()` function
shinyApp(ui = my_ui, server = my_server)
# The UI is the result of calling the `fluidPage()` layout function
my_ui <- fluidPage(
# A static content element: a 2nd level header that displays text
h2("Greetings from Shiny"),
# A widget: a text input box (save input in the `username` key)
textInput(inputId = "username", label = "What is your name?"),
# An output element: a text output (for the `message` key)
textOutput(outputId = "message")
)
# The server is a function that takes `input` and `output` arguments
my_server <- function(input, output) {
# Assign a value to the `message` key in the `output` list using
# the renderText() method, creating a value the UI can display
output$message <- renderText({
# This block is like a function that will automatically rerun
# when a referenced `input` value changes
# Use the `username` key from `input` to create a value
message_str <- paste0("Hello ", input$username, "!")
# Return the value to be rendered by the UI
message_str
})
}
# To start running your app, pass the variables defined in previous
# code snippets into the `shinyApp()` function
shinyApp(ui = my_ui, server = my_server)
source("my_ui.R")
source("my_server.R")
pwd()
getwd()
source("my_server.R")
source("my_ui.R")
source("my_server.R")
# To start running your app, pass the variables defined in previous
# code snippets into the `shinyApp()` function
shinyApp(ui = my_ui, server = my_server)
source("my_ui.R")
source("my_server.R")
library(mRkov)
?renderText
source("my_ui.R")
source("my_server.R")
# To start running your app, pass the variables defined in previous
# code snippets into the `shinyApp()` function
shinyApp(ui = my_ui, server = my_server)
source("my_ui.R")
source("my_server.R")
# To start running your app, pass the variables defined in previous
# code snippets into the `shinyApp()` function
shinyApp(ui = my_ui, server = my_server)
# To start running your app, pass the variables defined in previous
# code snippets into the `shinyApp()` function
shinyApp(ui = my_ui, server = my_server)
library(twitteR)
source("my_ui.R")
source("my_server.R")
# To start running your app, pass the variables defined in previous
# code snippets into the `shinyApp()` function
shinyApp(ui = my_ui, server = my_server)
source("my_server.R")
# To start running your app, pass the variables defined in previous
# code snippets into the `shinyApp()` function
shinyApp(ui = my_ui, server = my_server)
source("my_server.R")
# To start running your app, pass the variables defined in previous
# code snippets into the `shinyApp()` function
shinyApp(ui = my_ui, server = my_server)
?actionButton
?tweet_gettr
?renderText
?observeEvent
source("my_ui.R")
source("my_server.R")
# To start running your app, pass the variables defined in previous
# code snippets into the `shinyApp()` function
shinyApp(ui = my_ui, server = my_server)
runApp()
runApp()
my_server <- function(input, output) {
# Assign a value to the `message` key in the `output` list using
# the renderText() method, creating a value the UI can display
output$message <- renderText({
# This block is like a function that will automatically rerun
# when a referenced `input` value changes
# Use the `username` key from `input` to create a value
message_str <- paste0("Scraping ", input$username, "!")
# Return the value to be rendered by the UI
message_str
})
twitter_search <- observeEvent(
input$search, {
tweet_gettr(input$username)
}
)
output$sentence <- renderText({
input$make_sentence
make_sentence(twitter_search)
})
}
runApp()
runApp()
runApp()
runApp()
# The UI is the result of calling the `fluidPage()` layout function
my_ui <- fluidPage(
# A static content element: a 2nd level header that displays text
h2("mRkov: A fun toolbox"),
# A widget: a text input box (save input in the `username` key)
textInput(inputId = "username", label = "Insert Twitter handle (@)"),
# a button to activate a twitter search
actionButton(inputId = "search", label = "Search Twitter!"),
actionButton(inputId = "make_sentence", label = "Make a Sentence!"),
# An output element: a text output (for the `message` key)
textOutput(outputId = "message"),
# An output element: a text output (for the `message` key)
textOutput(outputId = "sentence")
)
runApp()
runApp()
runApp()
runApp()
runApp()
e
source("my_server.R")
# To start running your app, pass the variables defined in previous
# code snippets into the `shinyApp()` function
shinyApp(ui = my_ui, server = my_server)
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
library(devtools)
install("../mRkov")
runApp()
runApp()
shiny::runApp()
runApp()
?twitteR
?tweet_gettr
?make_sentence
library(dplyy)
library(dplyr)
library(mRkov)
data("tweets")
make_wordcloud <- function(information, stops = "") {
if (is.null(information)) {
return(NULL)
}
information <- information$tokens
information <- information %>%
dplyr::group_by(lowercase_tokens) %>%
dplyr::summarise(n = n()) %>%
dplyr::arrange(-n)
stopwords <- stopwords::data_stopwords_smart$en
stopwords <- c(stopwords, stops, "endofline")
stopwords <- data.frame(stopwords, stringsAsFactors = F)
information <- dplyr::anti_join(information, stopwords, by= c("lowercase_tokens" = "stopwords"))
wordcloud::wordcloud(information$lowercase_tokens, information$n)
}
make_wordcloud(tweets)
make_wordcloud <- function(information, stops = "") {
if (is.null(information)) {
return(NULL)
}
information <- information$tokens
information <- information %>%
count()
stopwords <- stopwords::data_stopwords_smart$en
stopwords <- c(stopwords, stops, "endofline")
stopwords <- data.frame(stopwords, stringsAsFactors = F)
information <- dplyr::anti_join(information, stopwords, by= c("lowercase_tokens" = "stopwords"))
wordcloud::wordcloud(information$lowercase_tokens, information$n)
}
make_wordcloud(tweets)
make_wordcloud(tweets)
print(count)
make_wordcloud <- function(information, stops = "") {
if (is.null(information)) {
return(NULL)
}
information <- information$tokens
information <- information %>%
count()
print(count)
stopwords <- stopwords::data_stopwords_smart$en
stopwords <- c(stopwords, stops, "endofline")
stopwords <- data.frame(stopwords, stringsAsFactors = F)
information <- dplyr::anti_join(information, stopwords, by= c("lowercase_tokens" = "stopwords"))
wordcloud::wordcloud(information$lowercase_tokens, information$n)
}
make_wordcloud <- function(information, stops = "") {
if (is.null(information)) {
return(NULL)
}
information <- information$tokens
information <- information %>%
count()
print(information)
stopwords <- stopwords::data_stopwords_smart$en
stopwords <- c(stopwords, stops, "endofline")
stopwords <- data.frame(stopwords, stringsAsFactors = F)
information <- dplyr::anti_join(information, stopwords, by= c("lowercase_tokens" = "stopwords"))
wordcloud::wordcloud(information$lowercase_tokens, information$n)
}
make_wordcloud(tweets)
information <- information %>%
count(lowercase_tokens, sort =T)
make_wordcloud <- function(information, stops = "") {
if (is.null(information)) {
return(NULL)
}
information <- information$tokens
information <- information %>%
count(lowercase_tokens, sort =T)
stopwords <- stopwords::data_stopwords_smart$en
stopwords <- c(stopwords, stops, "endofline")
stopwords <- data.frame(stopwords, stringsAsFactors = F)
information <- dplyr::anti_join(information, stopwords, by= c("lowercase_tokens" = "stopwords"))
wordcloud::wordcloud(information$lowercase_tokens, information$n)
}
make_wordcloud(tweets)
devtools::check()
library(mRkov)
devtools::document()
library(mRkov)
devtools::document()
install.packages("magrittr")
install.packages("magrittr")
devtools::document()
library(mRkov)
library(mRkov)
library(mRkov)
devtools::document()
library(mRkov)
devtools::document()
library(mRkov)
data("trump_tweets")
make_sentence(data("trump_tweets"))
make_sentence(data(trump_tweets))
class(trump_tweets)
make_sentence(trump_tweets)
make_sentence(trump_tweets)
make_sentence(trump_tweets)
devtools::document()
library(mRkov)
devtools::document()
library(mRkov)
?make_sentence
devtools::document()
library(mRkov)
?make_sentence
class(data("trump_tweets"))
print(data("trump_tweets"))
library(mRkov)
?make_sentence
devtools::document()
library(mRkov)
?make_sentence
library(roxygen2)
devtools::document()
library(mRkov)
?make_sentence
library(roxygen2)
library(devtools)
document()
library(mRkov)
?make_sentence
library(devtools)
library(roxygen2)
document()
library(mRkov)
?read_text_file
library(roxygen2)
library(devtools)
document()
library(mRkov)
?make_sentence
libar
library(roxygen2)
library(dev)
library(devtools)
document()
?make_sentence
library(mRkov)
?make_sente
?make_sentence
library(roxygen2)
devtools::document()
